
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACTION ALERT AND COMMENT DELIMETER EOL FUNC HEADER LCBRACKET NOT NUMBER OR PROTO QUOTES RANGE RCBRACKET\n    head    :   ACTION LCBRACKET chain RCBRACKET\n\t\t    |\thead ACTION LCBRACKET chain RCBRACKET\n    \n    head    :   ALERT ACTION LCBRACKET chain RCBRACKET\n\t\t    |\thead ALERT ACTION LCBRACKET chain RCBRACKET\n    \n    chain\t:\tPROTO LCBRACKET rule RCBRACKET\n\t\t    |\tchain PROTO LCBRACKET rule RCBRACKET\n    \n    rule\t:\tsection EOL\n\t\t    |\trule section EOL\n    \n    section :\tHEADER expr\n    \n    expr\t:\tQUOTES\n            |   FUNC QUOTES\n         \n    expr    :\tNUMBER\n\t\t    |\tNUMBER RANGE\n\t\t    |\tRANGE NUMBER\n\t\t    |\tNUMBER RANGE NUMBER\n    \n    expr    :   expr OR expr\n    \n    expr    :   expr AND expr\n    \n    expr    :   NOT expr\n    '
    
_lr_action_items = {'ACTION':([0,1,3,5,15,19,25,26,],[2,4,7,9,-1,-2,-3,-4,]),'ALERT':([0,1,15,19,25,26,],[3,5,-1,-2,-3,-4,]),'$end':([1,15,19,25,26,],[0,-1,-2,-3,-4,]),'LCBRACKET':([2,4,7,9,11,16,],[6,8,12,14,17,21,]),'PROTO':([6,8,10,12,13,14,18,20,28,37,],[11,11,16,11,16,11,16,16,-5,-6,]),'RCBRACKET':([10,13,18,20,22,27,28,30,37,38,],[15,19,25,26,28,37,-5,-7,-6,-8,]),'HEADER':([17,21,22,27,30,38,],[24,24,24,24,-7,-8,]),'EOL':([23,29,31,32,34,41,42,43,44,45,46,47,],[30,38,-9,-10,-12,-11,-13,-14,-18,-16,-17,-15,]),'QUOTES':([24,33,36,39,40,],[32,41,32,32,32,]),'FUNC':([24,36,39,40,],[33,33,33,33,]),'NUMBER':([24,35,36,39,40,42,],[34,43,34,34,34,47,]),'RANGE':([24,34,36,39,40,],[35,42,35,35,35,]),'NOT':([24,36,39,40,],[36,36,36,36,]),'OR':([31,32,34,41,42,43,44,45,46,47,],[39,-10,-12,-11,-13,-14,39,39,39,-15,]),'AND':([31,32,34,41,42,43,44,45,46,47,],[40,-10,-12,-11,-13,-14,40,40,40,-15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'head':([0,],[1,]),'chain':([6,8,12,14,],[10,13,18,20,]),'rule':([17,21,],[22,27,]),'section':([17,21,22,27,],[23,23,29,29,]),'expr':([24,36,39,40,],[31,44,45,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> head","S'",1,None,None,None),
  ('head -> ACTION LCBRACKET chain RCBRACKET','head',4,'p_head','parsercat.py',29),
  ('head -> head ACTION LCBRACKET chain RCBRACKET','head',5,'p_head','parsercat.py',30),
  ('head -> ALERT ACTION LCBRACKET chain RCBRACKET','head',5,'p_head_with_alert','parsercat.py',39),
  ('head -> head ALERT ACTION LCBRACKET chain RCBRACKET','head',6,'p_head_with_alert','parsercat.py',40),
  ('chain -> PROTO LCBRACKET rule RCBRACKET','chain',4,'p_chain','parsercat.py',50),
  ('chain -> chain PROTO LCBRACKET rule RCBRACKET','chain',5,'p_chain','parsercat.py',51),
  ('rule -> section EOL','rule',2,'p_rule','parsercat.py',61),
  ('rule -> rule section EOL','rule',3,'p_rule','parsercat.py',62),
  ('section -> HEADER expr','section',2,'p_section','parsercat.py',72),
  ('expr -> QUOTES','expr',1,'p_expr_quotes','parsercat.py',79),
  ('expr -> FUNC QUOTES','expr',2,'p_expr_quotes','parsercat.py',80),
  ('expr -> NUMBER','expr',1,'p_expr_number','parsercat.py',89),
  ('expr -> NUMBER RANGE','expr',2,'p_expr_number','parsercat.py',90),
  ('expr -> RANGE NUMBER','expr',2,'p_expr_number','parsercat.py',91),
  ('expr -> NUMBER RANGE NUMBER','expr',3,'p_expr_number','parsercat.py',92),
  ('expr -> expr OR expr','expr',3,'p_expr_or','parsercat.py',106),
  ('expr -> expr AND expr','expr',3,'p_expr_and','parsercat.py',112),
  ('expr -> NOT expr','expr',2,'p_expr_not','parsercat.py',118),
]
